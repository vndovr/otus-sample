quarkus.http.port=8000

service.profile-client/mp-rest/url = http://my-profile-otus-sample-profile:8000/profiles
service.profile-client/mp-rest/scope: javax.inject.Singleton

service.account-client/mp-rest/url = http://my-account-otus-sample-account:8000/accounts
service.account-client/mp-rest/scope: javax.inject.Singleton

service.warehouse-client/mp-rest/url = http://my-warehouse-otus-sample-account:8000/warehouseproducts
service.warehouse-client/mp-rest/scope: javax.inject.Singleton

service.delivery-client/mp-rest/url = http://my-delivery-otus-sample-account:8000/deliveries
service.delivery-client/mp-rest/scope: javax.inject.Singleton

quarkus.swagger-ui.enable = true
quarkus.swagger-ui.always-include=true

quarkus.datasource.db-kind = postgresql
quarkus.datasource.jdbc.driver = org.postgresql.Driver
quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/db1
quarkus.datasource.username = postgres
quarkus.datasource.password = test

# drop and create the database at startup (use `update` to only update the schema)
quarkus.hibernate-orm.log.sql = true
quarkus.hibernate-orm.log.format-sql = true
quarkus.hibernate-orm.database.geneneration =  none
quarkus.hibernate-orm.implicit-naming-strategy = org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl

quarkus.flyway.migrate-at-start=true

# The Kafka broker location (defaults to localhost:9092)
kafka.bootstrap.servers=localhost:9092

# Configuring the incoming channels (reading from Kafka)
mp.messaging.incoming.order-events-in.connector=smallrye-kafka
mp.messaging.incoming.order-events-in.topic=order-events
mp.messaging.incoming.order-events-in.key.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer
mp.messaging.incoming.order-events-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

mp.messaging.incoming.notification-events-in.connector=smallrye-kafka
mp.messaging.incoming.notification-events-in.topic=notification-events
mp.messaging.incoming.notification-events-in.key.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer
mp.messaging.incoming.notification-events-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

mp.messaging.incoming.billing-events-in.connector=smallrye-kafka
mp.messaging.incoming.billing-events-in.topic=billing-events
mp.messaging.incoming.billing-events-in.key.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer
mp.messaging.incoming.billing-events-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

mp.messaging.incoming.billing-sm-events-in.connector=smallrye-kafka
mp.messaging.incoming.billing-sm-events-in.topic=billing-sm-events
mp.messaging.incoming.billing-sm-events-in.key.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer
mp.messaging.incoming.billing-sm-events-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

mp.messaging.incoming.user-events-in.connector=smallrye-kafka
mp.messaging.incoming.user-events-in.topic=user-events
mp.messaging.incoming.user-events-in.broadcast=true
mp.messaging.incoming.user-events-in.key.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer
mp.messaging.incoming.user-events-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Configuring the outgoing channels (writing to Kafka)
mp.messaging.outgoing.order-events-out.connector=smallrye-kafka
mp.messaging.outgoing.order-events-out.topic=order-events
mp.messaging.outgoing.order-events-out.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer
mp.messaging.outgoing.order-events-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.notification-events-out.connector=smallrye-kafka
mp.messaging.outgoing.notification-events-out.topic=notification-events
mp.messaging.outgoing.notification-events-out.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer
mp.messaging.outgoing.notification-events-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.billing-events-out.connector=smallrye-kafka
mp.messaging.outgoing.billing-events-out.topic=billing-events
mp.messaging.outgoing.billing-events-out.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer
mp.messaging.outgoing.billing-events-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.billing-sm-events-out.connector=smallrye-kafka
mp.messaging.outgoing.billing-sm-events-out.topic=billing-sm-events
mp.messaging.outgoing.billing-sm-events-out.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer
mp.messaging.outgoing.billing-sm-events-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.user-events-out.connector=smallrye-kafka
mp.messaging.outgoing.user-events-out.topic=user-events
mp.messaging.outgoing.user-events-out.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer
mp.messaging.outgoing.user-events-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer

%dev.quarkus.datasource.db-kind = H2
%dev.quarkus.datasource.jdbc.driver=org.h2.Driver
%dev.quarkus.datasource.jdbc.url=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1

%dev.service.profile-client/mp-rest/url = http://localhost:8000/profiles
%dev.service.profile-client/mp-rest/scope: javax.inject.Singleton

%dev.service.account-client/mp-rest/url = http://localhost:8000/accounts
%dev.service.account-client/mp-rest/scope: javax.inject.Singleton

%dev.service.warehouse-client/mp-rest/url = http://localhost:8000/warehouseproducts
%dev.service.warehouse-client/mp-rest/scope: javax.inject.Singleton

%dev.service.delivery-client/mp-rest/url = http://localhost:8000/deliveries
%dev.service.delivery-client/mp-rest/scope: javax.inject.Singleton
